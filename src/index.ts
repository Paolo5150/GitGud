import { app, BrowserWindow, Menu, ipcMain, dialog } from 'electron';
import { ChangeDir, GitBranchName, GitChangeList, GitIsRepoValid, GitLog, GitStagedList, GitStageFile, GitStatus, GitTopLevel, GitUnstageFile, GitUntrackedFiles } from './gitcmds';
import { FSWatcher } from 'chokidar';
import path from 'path'
const chokidar = require('chokidar');

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

var currentRepoPath:string = "";
var isValidRepo: Boolean = false;
var mainWindow: Electron.BrowserWindow;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

var chokiWathcer: FSWatcher;

const CreateMenu = ()=>{

  const menu = Menu.buildFromTemplate([
    {
    label: 'File',
    submenu: [
      {
        label: 'Open Repo',
        click: (menuItem, browserWin) => openFolderPicker()
      }]
    },
     // Conditionally add the Git menu
     ...(isValidRepo
      ? [
          {
            label: 'Git',
            submenu: [
              {
                label: 'Status',
                click: () => GitStatus(mainWindow),
              },
              {
                label: 'Untracked Files',
                click: () => GitUntrackedFiles(mainWindow),
              },
            ],
          },
        ]
      : []),
  
  ]);

  Menu.setApplicationMenu(menu)
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  //mainWindow.webContents.openDevTools();
  mainWindow.setMenu(null);
  CreateMenu();
};

ipcMain.on('clicked-confirm-commit', async (event)=>
  { 
    console.log('asdasd')
  })

ipcMain.on('clicked-untracked-file', async (event, fileName: string)=>
  { 
    try{
      await GitStageFile(fileName); 
      Refresh();
    }catch(error) {
      mainWindow.webContents.send('log',"Error while staging " + fileName, 'e')
      mainWindow.webContents.send('log',"-- Recommendation: discard changes to this file", 'w')    
    }
  })

ipcMain.on('clicked-staged-file', (event, fileName: string)=>
  { 
    try{
      GitUnstageFile(fileName); 
      Refresh();
    }catch(error) {
      
    }
  })

ipcMain.on('clicked-changed-file', async (event, fileName: string)=>
  {
    try{
     await GitStageFile(fileName); 
     Refresh();
    }
    catch(error) {
      mainWindow.webContents.send('log',"Error while staging " + fileName, 'e')
      mainWindow.webContents.send('log',"\tRecommendation: discard changes to this file " + fileName, 'w')
    }
  })

  ipcMain.on('clicked-commit-btn', async (event, fileName: string)=>
    { 
      var dialogWindow = new BrowserWindow({
        width: 400,
        height: 300,
        title: "Commit your changes",
        webPreferences: {
            contextIsolation: true,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
        }
      });

      dialogWindow.loadFile(path.join('src' ,'dialogs', 'commitDialog.html'));

    // Optionally, handle the window closed event
     dialogWindow.on('closed', () => {
      });
    })

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);
// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

async function Refresh(){
  try
  {
    var name = await GitBranchName();
    mainWindow.webContents.send('update-branch-name',name)
  }
  catch(error)
  {
    mainWindow.webContents.send('update-branch-name','master')
    mainWindow.webContents.send('log','Looks like there are no commits, is this a fresh repo?', 'w')
  }
  

  var changelist = await GitChangeList()
  mainWindow.webContents.send('update-change-list',changelist)

  var untracked = await GitUntrackedFiles();
  mainWindow.webContents.send('update-untracked-list',untracked)

  var staged = await GitStagedList();
  mainWindow.webContents.send('update-staged-list',staged)

  var commits = await GitLog();
  mainWindow.webContents.send('update-log-list',commits)
}

///Pick folder to repo
async function openFolderPicker() {
  const result = await dialog.showOpenDialog(mainWindow, {
    properties: ['openDirectory'], // Allow only directory selection
  });

  if (!result.canceled) {
    const selectedFolderPath = result.filePaths[0]; // Get the selected folder path
    
    ChangeDir(selectedFolderPath)

    try{
      isValidRepo = true
      CreateMenu();

      //Start watcher
      chokiWathcer = chokidar.watch(selectedFolderPath, {
        persistent: true,
        ignoreInitial: true, // Ignore initial add events
        usePolling: true, // Use polling instead of native events for better compatibility
        interval: 100, // Polling interval (in milliseconds)
        binaryInterval: 300, // Polling interval for binary files
        awaitWriteFinish: { // Wait for the file write to finish
            stabilityThreshold: 1000, // Wait for 1 second after a write
            pollInterval: 100 // Polling interval while waiting
        }
      });

      chokiWathcer.on('all', (event: any, path: any) => {
        console.log("Refresh")
        Refresh();
      
      });

      var title = await GitTopLevel();
      var tokens = title.split('/')
      var name = tokens.at(tokens.length -1)
      mainWindow.webContents.send('update-title',name)
    
    }
    catch(error)
    {
      dialog.showMessageBox(mainWindow, {
        type: 'info', // Type of dialog (info, error, question, etc.)
        title: 'Alert',
        message: 'This is not a valid git repo!',
        buttons: ['OK'], // Button(s) to display
      }).then(result => {
      }).catch(err => {
      });
    }

    Refresh();
  

    // You can perform further actions with the selected folder here
  } else {
    console.log('Folder selection was canceled');
  }
}
